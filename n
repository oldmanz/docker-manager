#!/usr/bin/env python3
current_version = 1.2
current_image = "2nform/docker-local-dev:1.4"
container_name = "2nform"


import time
import os
import sys
import subprocess
import json
import types
from datetime import date

homeDir = os.path.expanduser("~")

########### INSTALL / IMPORT Modules #################
## Attempts to import modules.
## Installs them if it can't.
try:
	import docker
	from docker.utils import kwargs_from_env
	from rich.console import Console
	from rich.table import Table
	from rich.progress import Progress
	import requests
except:
	print("Modules not found.  Attempting Install...")
	try:
		subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'docker'])
		subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'rich'])
		subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'requests'])
		print("Installation complete!  Re-run script!")
	except:
		print("Couldn't install Modules.  Is pip installed and in path?")
	sys.exit()


####### Main Function #####
## Sets Up Config, Args, and Updates.
## Then Passes Args to Dispatcher 
def main():

	######## Setup Console Logger ######
	console = Console()


	######## SETUP CONFIG Manager #############
	## Pass in rich console, and versions.
	config = Config()

	
	######## ARGS RETRIEVER #######
	## Pass in rich console
	args = Args(console)
	
	########### CHECK FOR UPDATES #######################
	# Filter out update arg to force updates.
	updater = Updater(config)

	if args.get(1) == "update":
		updater.startUpdate()

	## Check if update needed. 
	else:	
		today = date.today()
		if not config.get("manager", "lastChecked") == str(today):
			updater.startUpdate()
		if not config.get("container", "lastChecked") == str(today):
			updater.startUpdate()



	######## Setup Docker Management #######	
	## Pass in rich console and container name
	docker = Docker(config)

	

	######## No Arguments >  Start Shell  ######
	if not args.get(1):
		docker.shell()

		sys.exit()



	######## Send all Other Requests to Dispatcher ##########
	## Pass Args, Docker classes in.
	dispatcher(args, docker, config)



#### Dispatcher  ######
## Dispatches to Various Methods by Arguments Passed
def dispatcher(args, docker, config):
	console = Console()
	## Switch Statments not added till 3.10 (2021)
	## Using IF-ELSE for backwards compat
	
	## Getting args from Args class.
	arg1 = args.get(1)
	arg2 = args.get(2)
	arg3 = args.get(3)

	### Switchboard Ifs ###
	if arg1 in ["start", "s"]:
		docker.start()
	
	elif arg1 in ["restart", "r"]:
		docker.restart()
	
	elif arg1 in ["stop", "q"]:
		docker.stop()
	
	elif arg1 in ["pause", "p"]:
		docker.pause()
	
	elif arg1 in ["resume", "unpause", "e"]:
		docker.unpause()

	elif arg1 in ["remove", "drop", "x"]:
		if arg2 in ["hard", "h", "x"]:
			if yesno("This will remove all data. Are you sure?", "no"):
				docker.remove(True)
		else:
			if yesno("Are you sure?", "no"):
				docker.remove()

	elif arg1 in ["reset", "xx"]:
		if yesno("This will remove all data. Are you sure?", "no"):
			docker.reset()

	elif arg1 in ["restore"]:
		if arg2 in ["latest", "l"]:
			docker.restore(latest=True)
		else:
			docker.restore()

	elif arg1 in ["logs", "log", "l"]:
		if arg2:
			docker.logs(arg2)
		else:
			docker.logs()

	elif arg1 in ["ssh"]:
		docker.ssh()

	elif arg1 in ["config"]:
		config.view()

	elif arg1 in ["help", "h"]:
		showHelp()

	elif arg1 in ["setup"]:
		docker.setup()

	## Handled before dispatcher  Just Exit here
	elif arg1 in ["update"]:
		sys.exit()



	### Catch All ###
	else:
		##  Print error and specific missing commands
		console.print("[red]Command " + arg1 + " " + arg2 + " " + arg3 + " : [red]Not Found")







################# CLASSES ################

####### Config  Management ###############
class Config:
	def __init__(self):
		## Setup some vars
		self.console = Console()
		self.version = current_version
		self.image = current_image
		self.name = container_name

		## Setup File Path
		self.homeDir = homeDir
		self.filePath = self.homeDir + "/.2nform.conf"

		## Empty config Object
		self.config = {}
		
		## Create conf if it doesn't exist
		self.exists()

		## Config Check 
		self.check()


	## Creates config if it doesn't exist
	## Loads if it Does
	def exists(self):
		if not os.path.exists(self.filePath):
			self.createDefaultConfig()
		else:
			try:
				with open(self.filePath, "r") as configfile:
					self.config = json.load(configfile)
			except:
				self.error()


	## Check Config for Errors
	def check(self):
		try:
			## Update vol list to vol dict
			if type(self.get("container", "volumes")) != dict:
				self.update("container", "volumes", {
						"2nform": {
			                "bind": "/var/www",
			                "mode": "rw"
			            },
			            "postgres-data": {
			                "bind": "/var/lib/postgresql",
			                "mode": "rw"
			            },
					})
				self.write()

			assert type(self.get("manager", "setup")) == bool
			assert type(self.get("manager", "lastChecked")) == str
			assert type(self.get("container", "lastChecked")) == str
			assert type(self.get("container", "image")) == str
			assert type(self.get("container", "detach")) == bool
			assert type(self.get("container", "restart_policy")) == dict
			assert type(self.get("container", "name")) == str
			assert type(self.get("container", "hostname")) == str
			assert type(self.get("container", "ports")) == dict
			assert type(self.get("container", "volumes")) == dict
			assert type(self.get("container", "environment")) == list
		except Exception as e:
			self.error()
						


	def error(self):
		self.console.print("There is an error in your config file.")
		if yesno("Would you like to reset it?", "yes"):
			self.createDefaultConfig()	
		else:
			sys.exit()


	## Creates a default config
	def createDefaultConfig(self):
		## Define some defaults
		self.config = {
			'manager' : {
				'setup': False,
				'lastChecked': '2022-01-14'
			},
			'container' : {
				'lastChecked': '2022-01-14',
				'image': self.image,
				'detach': True,
				'restart_policy': {"Name": "always"},
				'name': self.name,
				'hostname': self.name,
				'ports': {
					80 : 80,
					5432 : 15432,
					9003 : 9003,
					3000 : 3000,
					5000 : 5000,
					35729 : 35729
				},
				'volumes': {
					"2nform": {
		                "bind": "/var/www",
		                "mode": "rw"
		            },
		            "postgres-data": {
		                "bind": "/var/lib/postgresql",
		                "mode": "rw"
            		}
            	},
				'environment': [
					'GIT_USERNAME=',
					'GIT_EMAIL=',
					'AWS_ACCESS_KEY_ID=',
					'AWS_SECRET_ACCESS_KEY='
				]
			}
		}
		self.write()


	## Writes Config to File
	def write(self):
		## Open File and Write Config
		with open(self.filePath, 'w') as configfile:
			json.dump(self.config, configfile,  indent=4)


	## Takes Two Strings and returns value.
	def get(self, title, field=""):
		try:
			if field:
				return self.config[title][field]
			else:
				return self.config[title]
		except:
			return None


	## Takes Two Strings and Updates Config Object
	## Must Write Changes to Update
	def update(self, title, field, value):
		self.config[title][field] = value


	def viewVersion(self):
		## Setup Version Table
		tableVersions = Table(
				show_header=True, 
				header_style="bold blue", 
				title="Versions", 
				title_style="bold red"
			)
		tableVersions.add_column("Manager")
		tableVersions.add_column("Image")

		## Setup Var
		cc = self.config.get("container")

		## Add versions to version table		
		tableVersions.add_row("[red]"+str(current_version), "[red]"+cc["image"])

		## Show tables
		self.console.print(tableVersions)

	def viewConfig(self, ports=False, volumes=False, envs=False):
		## Setup Container Table
		table = Table(
				show_header=True, 
				header_style="bold blue",
				title="Config",
				title_style="bold red"
			)
		table.add_column("Ports")
		table.add_column("Volumes")
		table.add_column("Environment")

		## Setup Vars
		if not ports or not volumes or not envs:
			cm = self.config.get("manager")
			cc = self.config.get("container")
			ports = cc["ports"]
			volumes = cc["volumes"]
			envs = cc["environment"]

		## Create sub tables
		pTable = Table(show_header=False, box=None)
		for port in ports:
			pTable.add_row("[yellow]"+ str(port) + " : " + str(ports[port]))

		vTable = Table(show_header=False, box=None)
		for volume in volumes:
			vTable.add_row("[magenta]"+volume + " : " + volumes[volume]["bind"])

		eTable = Table(show_header=False, box=None)
		for env in envs:
			eTable.add_row("[green]"+env)

		## Add sub tables to main
		table.add_row(
			pTable,
			vTable,
			eTable
		)
		
		self.console.print(table)



	## View Current Config
	def view(self):
		self.viewVersion()
		self.viewConfig()



#######  Passed Arguments ########
class Args:
	def __init__(self, console):
		## Setup rich console
		self.console = console
		
		## Set args to list of passed args
		self.args = sys.argv


	## Takes index, returns Arg Value
	## Returns '' if none found
	def get(self, index):	
		try:
			return self.args[index]
		except:
			return ""


	## Returns length of Args
	def length(self):
		return len(self.args)



####### Docker Management #####
class Docker:
	def __init__(self, config):
		## Setup rich console
		self.console = Console()

		## Setup Config
		self.config = config

		## Set Container Name 
		self.name = container_name

		## Create client
		self.client = docker.from_env()
		self.api = docker.APIClient(**kwargs_from_env())

		## Check if container exists
		self.container = self.container()

		## Get Container Status
		self.status = self.status()




	## Returns container if exists
	## Starts Setup if No Container
	## Exits if Docker Not Running or Installed
	def container(self):
		try:
			container = self.client.containers.get(self.name)
			return container
		except (docker.errors.NotFound):
			## Check if configured and start
			self.init()
			return self.container
		except (docker.errors.APIError):
			self.console.print("Docker Down or Not Installed", style="bold red")
			sys.exit()


	## Returns Container Status
	## Either 'running' or 'exited'
	def status(self):
		try:
			return self.container.status
		except:
			return "none"

	## Stop Container
	def stop(self):
		try:
			self.console.print("Stopping...", style="blue")
			self.container.stop()
			self.console.print("Container Stopped", style="green")
		except:
			self.console.print("Error Stopping Container", style="bold red")

	## Start Container
	def start(self):
		try:
			self.console.print("Starting...", style="blue")
			self.container.start()
			self.console.print("Container Started", style="bold green")
		except:
			self.console.print("Error Starting Container", style="bold red")

	## Restart Container
	def restart(self):
		try:
			self.console.print("Restarting...", style="blue")
			self.container.restart()
			self.console.print("Container Restarted", style="bold green")
		except:
			self.console.print("Error Restarting Container", style="bold red")

	## Pause Container
	def pause(self):
		try:
			self.console.print("Pausing...", style="blue")
			self.container.pause()
			self.console.print("Container Paused", style="green")
		except:
			self.console.print("Error Pausing Container", style="bold red")

	## Unpause Container
	def unpause(self):
		try:
			self.container.unpause()
			self.console.print("Container Resumed")
		except:
			self.console.print("Error Resuming Container")

	## Remove Container
	## Pass True to drop volumes associated with the container.
	def remove(self, drop=False):
		try:
			self.stop()
			self.container.remove(v=drop)
			self.console.print("Container Removed")
		except e:
			self.console.print("Error Removing Container")

	def reset(self):
		try:
			self.remove(True)
			self.run()
		except:
			self.console.print("Reset Failed")

	def restore(self, file=False):
		try:
			if file:
				## Run restore bin
				os.system("docker exec -it " + self.name + "restore")
			else:
				## Run Script restore
				os.system("docker exec -it " + self.name + " /opt/scripts/restore force")
		except:
			self.console.print("Error Starting Restore.")


	## Start Shell
	## TODO - Convert to docker-py. (can't get stdin and tty to work)
	def shell(self):
		try:
			clear()
			os.system("docker exec -it " + self.name + " zsh")
			clear()
		except:
			self.console.print("Error Starting Shell")

	## Show SSH Key
	def ssh(self):
		os.system("docker exec -it " + self.name + " cat /root/.ssh/id_ed25519.pub") 



	## Show Logs 
	def logs(self, type=False):
		if type:
			os.system("docker exec -it " + self.name + " tail -f /var/log/2nform/" + type + ".log") 
		else:	
			os.system("docker logs " + self.name)


	## Run the Container
	def run(self):
		## Set cc to container config
		cc = self.config.get("container")
		## Show current Config
		self.config.view()

		## Prompt user to continue
		if yesno("Does this look correct?"):
			## Pull the Image
			self.pull(cc["image"])
			## Run Container 
			self.console.print("Running Container...", style="blue")
			print(cc["volumes"])
			self.container = self.client.containers.run(
				image = cc["image"],
				detach = cc["detach"],
				restart_policy = cc["restart_policy"],
				name = cc["name"],
				hostname = cc["hostname"],
				ports = cc["ports"],
				volumes = cc["volumes"],
				environment = cc["environment"]
				)

			self.console.print("Container Running", style="green")
		else:
			self.setup()



	## Pull Image
	def pull(self, image):
		tasks = {}
		ids = []
		## Start a progress bar
		try:
			with Progress() as progress:
				## Use low level api to get download status.
				for line in self.api.pull(image, stream=True, decode=True):
					try:
						id = line["id"]
						if not line["id"] in ids:
							try:
								tasks[id] = progress.add_task(line["status"], total=line["progressDetail"]["total"])
							except:
								tasks[id] = progress.add_task(line["status"])

							ids.append(id)
						else:
							try:
								progress.update(tasks[id], description=line["status"], completed=line["progressDetail"]["current"], total=line['progressDetail']['total'])
							except:
								print()
					except:
						## TODO Figure out a better way to do the above.  Error catch all.
						self.console.print("Possible Error")
		except:
			self.console.print("Image Not Found on Remote")


	## Init run / setup
	def init(self):
		if self.config.get("manager", "setup"):
			self.run()
		else:
			self.setup()


	## Setup Process
	def setup(self):
		setup = Setup(self.config)
		setup.start()



##### Setup Class

class Setup:
	def __init__(self, config):
		self.console = Console()
		self.config = config

	## Start Setup
	def start(self):
		## Clear Shell and Print Welcome
		clear()
		self.console.print("Welcome to Docker Setup!\n", style="bold blue")


		## Setup Ports
		self.ports = self.ports()

		## Setup Volumes
		#self.volumes = self.volumes()
		self.volumes = self.config.get("container", "volumes")

		## Setup Envs
		self.envs = self.envs()

		clear()

		self.config.viewConfig(self.ports, self.volumes, self.envs)

		if yesno("Does this look correct?"):
			clear()
			self.console.print("[blue]Updating Config...")
			self.config.update("container", "ports", self.ports)
			self.config.update("container", "volumes", self.volumes)
			self.config.update("container", "environment", self.envs)
			self.config.update("manager", "setup", True)
			
			time.sleep(1.4)
			self.console.print("[Writing Config...]")
			self.config.write()
			time.sleep(1)

			clear()
			self.console.print("[green]Setup Complete!")
			self.config.viewConfig()
			self.console.print("[yellow] Re-run [blue]n [yellow]command to start the container!")
			input("Press any Key to Quit.")


		else:
			self.console.print("[blue]Changes [red]not Saved")
			time.sleep(1.5)
			sys.exit()		


	## Ports section: Returns dict of ports.
	def ports(self, ports=False, desc=False, invalid=False, first=True):
		## Clear Console
		clear()
		
		## Display Invalid Input
		if invalid:
			self.console.print("[red]Invalid Input: {}\n".format(invalid))

		## Create Table
		table = Table(
				show_header=True, 
				header_style="bold blue", 
				title="Ports", 
				title_style="bold red"
			)

		## Add id and data Column to Table
		table.add_column("ID")
		table.add_column("Container:Host")
		table.add_column("Description")

		## Add Some Default Ports if none passed.
		if not ports:
			ports = {
				80 : 80,
				5432 : 15432,
				9003 : 9003,
				3000 : 3000,
				5000 : 5000,
				35729 : 35729	
			}

		if not desc:
			desc = [
				"Main Http Port",
				"Postgres for Dbeaver Connection",
				"PHP XDebug",
				"Node Api",
				"Python Flask",
				"Chrome Live Reload"
			]


		for i, port in enumerate(ports, start=1):
			table.add_row(str(i), str(port) + " : " + str(ports[port]), desc[i-1])

		## Show Table
		self.console.print(table)
		
		## Prompt User
		if first:
			self.console.print("[blue]Here are the default port mappings.")
		self.console.print("[blue]To [red]remove [blue]a port mapping, [yellow]submit [blue]it's [yellow]id")
		self.console.print("[blue]To [grean]add [blue]a custom port, [yellow]submit [blue]it like [green]8080:8080  [yellow](Container[blue]:[yellow]Host)")
		self.console.print("[blue]If you are [magenta]modifying an existing, [red]remove [blue]it and [green]add [blue]a new mapping.")
		self.console.print("[blue]To quit setup, submit [bold cyan]q")
		self.console.print("[blue]To [green]accept [blue]your settings, [blue] press [bold green]enter")
		userInput = input()

		## Parse Input
		try:
			userInput = int(userInput)
			for i, port in enumerate(ports, start=1):
				if i == userInput:
					del ports[port]
					desc.pop(i-1)
					break
		except:
			try:
				array = userInput.split(":")
				ports[int(array[0])] = int(array[1])
				desc.append("Custom")
			except:
				if userInput == '':
					return ports
				elif userInput.lower() == 'q':
					self.quit()
				else:
					return self.ports(ports, desc, invalid=userInput, first=False)

		return self.ports(ports, desc, first=False)



	## Volumes: Returns Dict
	def volumes(self, volumes=False, desc=False, invalid=False, type="initial"):
		## Clear Console
		clear()
		
		## Display Invalid Input
		if invalid:
			self.console.print("[red]Invalid Input: {}\n".format(invalid))

		## Create Table
		table = Table(
				show_header=True, 
				header_style="bold blue", 
				title="Volumes", 
				title_style="bold red"
			)

		## Add id and data Column to Table
		table.add_column("ID")
		table.add_column("Host:Container")
		table.add_column("Description")

		## Add Some Default Ports if none passed.
		if not volumes:
			volumes = [
				'2nform:/var/www',
				'postgres-data:/var/lib/postgresql',
				'user-data:/root'	
			]

		if not desc:
			desc = [
				"Main Project Storage",
				"Postgres Data",
				"User Data"
			]


		for i, volume in enumerate(volumes, start=1):
			table.add_row(str(i), str(volume), desc[i-1])

		## Show Table
		self.console.print(table)
		
		## Prompt User
		if type == "initial":
			self.console.print("[blue]Here are the default volume mappings for [yellow]" + getOS())
			self.console.print("[cyan]These allow data to be persisted between updates")
			self.console.print("[blue]The most [bold blue]important [blue]choice here is the mount for [green]/var/www")
			if getOS() != "windows":
				if yesno("Will you be using VSCode Remote Tools?"):
					return self.volumes(type="second")
				else:
					if getOS() == "mac":
						self.console.print("[blue]On Mac, we will need to setup an NFS Mount [yellow]This will happen automatically")

					if yesno("Do you want to use the [blue]2nform [yellow]folder in your home dir as the project folder?  [green]It Will Be Created"):
						folderDir = homeDir+"/2nform"
						#if getOS() == "mac":
							#createNFSMount(folderDir)
						volumes.pop(0)
						volumes.insert(0, folderDir+":/var/www")
						return self.volumes(volumes, type="second")
					else:
						self.console.print("[yellow]What folder would you like to use?  [blue](Absolute Path)")
						folderDir = input(">")
						#if getOS() == "mac":
							#createNFSMount(folderDir)
						volumes.pop(0)
						volumes.insert(0, str(userInput)+ ":/var/www")
						return self.volumes(volumes, type="second")
			else:
				self.console.print("[yellow]On [blue]Windows[yellow], you must use [magenta]VSCode [yellow]Remote to develop.")
				self.console.print("[yellow]You should leave [blue]2mform:/var/www [yellow]as default")
				input("Press any key to continue..")
				return self.volumes(volumes, type="second")

		elif type == "second":
			self.console.print("[cyan]You can now make custom changes to mounts")
		
		self.console.print("[blue]To [red]remove [blue]a mount, [yellow]submit [blue]it's [yellow]id")
		self.console.print("[blue]To [grean]add [blue]a custom mount, [yellow]submit [blue]it like [green]/path:/path [yellow](Host[blue]:[yellow]Container)")
		self.console.print("[blue]If you are [magenta]modifying an existing, [red]remove [blue]it and [green]add [blue]a new mount.")
		self.console.print("[blue]To quit setup, submit [bold cyan]q")
		self.console.print("[blue]To [green]accept [blue]your settings, [blue] press [bold green]enter")
		userInput = input()

		## Parse Input
		try:
			userInput = int(userInput)
			for i, volume in enumerate(volumes, start=1):
				if i == userInput:
					volumes.pop(i-1)
					desc.pop(i-1)
					break
		except:
			if userInput == '':
				return volumes
			elif userInput.lower() == 'q':
				self.quit()
			else:
				volumes.append(str(userInput))
				desc.append("Custom")
				return self.volumes(volumes, desc, type="final")

		return self.volumes(volumes, desc, type="final")


	## Envs: Returns Dict
	def envs(self, envs=False, invalid=False, type="initial"):
		## Clear Console
		clear()
		
		## Display Invalid Input
		if invalid:
			self.console.print("[red]Invalid Input: {}\n".format(invalid))

		## Create Table
		table = Table(
				show_header=True, 
				header_style="bold blue", 
				title="Envs", 
				title_style="bold red"
			)

		## Add id and data Column to Table
		table.add_column("ID")
		table.add_column("Env")

		if envs:
			for i, env in enumerate(envs, start=1):
				table.add_row(str(i), str(env))


		if type == "initial":
			self.console.print("[blue]Finally, we need to set a few vars for the container.")
			self.console.print("[yellow]Enter your [blue]git username:")
			gitUsername = input(">")
			self.console.print("[yellow]Enter your [blue]git email:")
			gitEmail = input(">")
			self.console.print("[yellow]Enter Your [blue]AWS Access Key:")
			gitAccess = input(">")
			self.console.print("[yellow]Enter your [blue]AWS Secret Key:")
			gitSecret = input(">")
			envs = []
			envs.append("GIT_USERNAME="+str(gitUsername))
			envs.append("GIT_EMAIL="+str(gitEmail))
			envs.append("AWS_ACCESS_KEY_ID="+str(gitAccess))
			envs.append("AWS_SECRET_ACCESS_KEY="+str(gitSecret))

			return self.envs(envs, type="second")

		## Show Table
		self.console.print(table)

		if type == "second":
			self.console.print("[cyan]You can now make custom changes to envs")
		
		self.console.print("[blue]To [red]remove [blue]an env, [yellow]submit [blue]it's [yellow]id")
		self.console.print("[blue]To [grean]add [blue]a custom env, [yellow]submit [blue]it like [green]ENV=value [yellow]")
		self.console.print("[blue]If you are [magenta]modifying an existing, [red]remove [blue]it and [green]add [blue]a new env.")
		self.console.print("[blue]To quit setup, submit [bold cyan]q")
		self.console.print("[blue]To [green]accept [blue]your settings, [blue] press [bold green]enter")
		userInput = input()

		## Parse Input
		try:
			userInput = int(userInput)
			for i, env in enumerate(envs, start=1):
				if i == userInput:
					envs.pop(i-1)
					break
		except:
			if userInput == '':
				return envs
			elif userInput.lower() == 'q':
				self.quit()
			else:
				envs.append(str(userInput))
				return self.envs(envs, type="final")

		return self.envs(envs, type="final")





	## Quit Setup
	def quit(self):
		clear()
		self.console.print("[bold blue] Setup has been quit.")
		self.console.print("[red] No [blue]changes have been made.")
		time.sleep(2)
		clear()
		sys.exit()


class Updater():
	def __init__(self, config, force=False):
		self.config = config
		self.force = force
		self.console = Console()
		self.url = "https://raw.githubusercontent.com/oldmanz/docker-manager/main/n"
		self.today = str(date.today())
		self.r = self.requestRemote()

	
	def requestRemote(self):
		try:
			r = requests.get(self.url, allow_redirects=True)
			return r
		except:
			console.print("[red]Remote Not Available")
			return False


	def updateConfig(self, type="manager"):
		if type == "manager" or type == "both":
			self.config.update("manager", "lastChecked", self.today)
		if type == "container" or type == "both":
			self.config.update("container", "image", current_image)
			self.config.update("container", "lastChecked", self.today)
		
		self.config.write()


	def checkManager(self):
		if self.r:
			for line in self.r.iter_lines():
				try:
					decoded = line.decode('utf8', 'strict')
					splitLines = decoded.split("=")
					if splitLines[0] in ["current_version ", "current_version"]:
						latest_version = splitLines[1]
						if float(latest_version) != float(current_version):
							return True
						else:
							self.console.print("No Manager Updates")
							self.updateConfig()
							return False
				except:
					self.console.print("[red]Remote Error")
					self.updateConfig()
					return False
		else:
			return False

	def checkContainer(self):
		## Get Current Version From Config
		ci = self.config.get("container", "image")
		## Get latest version from manager
		li = current_image
		## Split images to get version
		cv = ci.split(":")
		lv = li.split(":")

		## Compare versions
		if float(cv[1]) != float(lv[1]):
			c = str(cv[1])
			l = str(lv[1])
			## Set vars to array of version
			self.ca = c.split(".")
			self.la = l.split(".")
			return True
		else:
			self.console.print("No Container Updates")
			self.updateConfig("container")
			return False


	def startUpdate(self, force=False):
		if self.checkManager():
			if self.updateManager():
				sys.exit()
		elif self.checkContainer():
			self.updateContainer()

		else:
			self.console.print("[yellow]No Updates")
			return False


	def updateManager(self):
		
		if getOS() == "windows":
			filePath = r'C:\\Windows\System32\n.py'
		else:
			filePath = "/usr/local/bin/n"
		
		try:
			open(filePath, 'wb').write(self.r.content)
			self.updateConfig()
			console.print("[green]Updated!")
			return True
		except Exception as e:
			try:
				downFile = homeDir+"/n-2nform-download"
				open(downFile, 'wb').write(self.r.content)

				if getOS() == "windows":
					subprocess.call(['copy', downFile, filePath])
				else:
					subprocess.call(['sudo', 'cp', downFile, filePath])
					subprocess.call(['sudo', 'chmod', '+x', filePath])
				os.remove(downFile)

				self.updateConfig()
				self.console.print("[green]Manager Updated!")
				return True
			except Exception as e:
				print(e)
				self.console.print("Error")
				self.console.print("Can't Update")
				self.updateConfig()
				return False


	def updateContainer(self, major=False):
		if int(self.la[0]) != int(self.ca[0]):
			self.console.print("This is a Major Version Container Update.")
			self.console.print("All data will need to be dropped.")
			if yesno("Would you like to proceed?", "no"):
				drop=True
			else:
				self.console.print("Update Aborted")
				self.console.print("To start update, run 'n update'")
				sys.exit()
		else:
			drop=False

		self.console.print("Starting Container Update")
		self.updateConfig("container")
		docker = Docker(self.config)
		docker.remove(drop=drop)
		docker.run()
		self.console.print("Container Updated")
		sys.exit()




########  Misc Functions  #####################




### Yes / No ##
## Pass question and the default answer
def yesno(label, default="yes"):
	
	console = Console()

	valid = {"yes": True, "y": True, "Y": True,
			"no": False, "n": False, "N": False}
	if default is None:
		prompt = " [green](y[yellow]/[red]n) "
	elif default == "yes":
		prompt = " [yellow]([bold green]Y[yellow]/[red]n[yellow]) "
	elif default == "no":
		prompt = " [yellow]([green]y[yellow]/[bold red]N[yellow]) "
	else:
		raise ValueError("invalid default answer: '%s'" % default)

	while True:
		console.print("[yellow]" + label + prompt)
		choice = input().lower()
		if default is not None and choice == '':
			return valid[default]
		elif choice in valid:
			return valid[choice]
		else:
			console.print("[bold red]Invalid input\n") 



def getOS():
	if sys.platform.startswith('linux'):
		return "linux"
	elif sys.platform == 'darwin':
		return "mac"
	elif sys.platform == "win32":
		return "windows"
	else:
		return "unknown"



def createNFSMount(folderDir):
	console = Console()
	if getOS() != "mac":
		console.print("[red] Can't Create an NFS Mount on this OS!")
		sys.exit()

	console.print("[blue] NFS Mount Creation")
	

	if not yesno("[yellow]This will stop any running containers. Would you like to continue?"):
		sys.exit()

	try:
		subprocess.run([
			'echo "== Stopping running docker containers..."',
			'docker-compose down > /dev/null 2>&1',
			'docker volume prune -f > /dev/null',
			"""osascript -e 'quit app "Docker"'""",
			"mkdir {}".format(folderDir),
			'echo "== Resetting folder permissions..."',
			'U=`id -u`',
			'G=`id -g`',
			'sudo chown -R "$U":"$G" .',
			'echo "== Setting up nfs..."',
			'LINE="/System/Volumes/Data -alldirs -mapall=$U:$G localhost"',
			'FILE=/etc/exports',
			'sudo cp /dev/null $FILE',
			'grep -qF -- "$LINE" "$FILE" || sudo echo "$LINE" | sudo tee -a $FILE > /dev/null',
			'LINE="nfs.server.mount.require_resv_port = 0"',
			'FILE=/etc/nfs.conf',
			'grep -qF -- "$LINE" "$FILE" || sudo echo "$LINE" | sudo tee -a $FILE > /dev/null',
			'echo "== Restarting nfsd..."',
			'sudo nfsd restart',
			'echo "== Restarting docker..."',
			'open -a Docker',
			'while ! docker ps > /dev/null 2>&1 ; do sleep 2; done',
			'echo ""',
			'echo "SUCCESS!"'
			])
		return True
	except:
		console.print("[red]Error Creating NFS Mount")
		sys.exit()



## Clear screen
def clear():

	## If windows
	if os.name == 'nt':   
		_ = os.system('cls')   
  
	## Mac and Linux 
	else:   
		_ = os.system('clear')   



def showHelp():
	console = Console()
	table = Table(
				show_header=True, 
				header_style="bold blue", 
				title="Docker Manager Command Reference", 
				title_style="bold red"
			)
	table.add_column("Command")
	table.add_column("Description")

	help = [
		["[blue]n [yellow](alone)", "[yellow]Start Setup / Daily Update / Start Shell"],
		["",""],
		["[blue]start[yellow]|[blue]s", "[yellow]Start Container"],
		["[blue]restart[yellow]|[blue]r", "[yellow]Restart Container"],
		["[blue]stop[yellow]|[blue]q", "[yellow]Stop Container"],
		["[blue]pause[yellow]|[blue]p", "[yellow]Pause Container"],
		["[blue]resume[yellow]|[blue]unpause[yellow]|[blue]u", "[yellow]Resume Container"],
		["",""],
		["[blue]update", "[yellow]Force System Update.  [magenta](Same as Daily Check)"],
		["[blue]remove[yellow]|[blue]drop[yellow]|[blue]x", "[yellow]Remove Container [green](Data Persists)"],
		["[blue]reset[yellow]|[blue]xx", "[yellow]Reset Container [red](Data Lost)"],
		["",""],
		["[blue]restore", "[yellow]Start a Database Restore [blue](Pulls latest backup)"],
		["[blue]restore f", "[yellow]Restore from a Backup File. [blue](Placed in /dump)"],
		["",""],
		["[blue]logs[yellow]|[blue]l", "[yellow]Show Container Logs"],
		["[blue]logs [yellow][[blue]api[yellow]|[blue]ram[yellow]|[blue]...[yellow]]", "[yellow]Display Custom Logs"],
		["",""],
		["[blue]ssh", "[yellow]Print your ssh key"],
		["[blue]config", "[yellow]View Current Manager Config"],
		["",""],
		["[blue]help[yellow]|[blue]h", "[yellow]This!"]
	]

	for i in help:
		table.add_row(i[0], i[1])

	console.print(table)


############ Start Main Process ###########
if __name__=="__main__":
   main()
